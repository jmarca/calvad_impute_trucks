{
   "language": "javascript",
   "views": {
       "pair_check": {
           "map": "function(doc) {\n  var re = new RegExp(\"wim\"); \n  if( re.test(doc._id) ){\n    var year_regex = new RegExp(\"^\\\\d{4}$\");\n    var keys = Object.keys(doc);\n    var ys = keys.filter(function(k){return year_regex.test(k)});\n    \n    ys.forEach(function(y){\n      var wim_dir = doc._id.split('.').slice(1);\n      if(doc[y].merged === undefined || doc[y].merged == 'todo'){\n        emit(['todo',y,wim_dir[0],wim_dir[1]], null);\n      }else if( doc[y].merged == 'nopair' ){\n       emit(['nopair',y,wim_dir[0],wim_dir[1]], null);\n      }\n    })\n  }\n}",
           "reduce": "_count"
       },
       "chains_check": {
           "map": "function(doc) {\n  var re = new RegExp(\"wim\");\n  if( re.test(doc._id) ){\n    var year_regex = new RegExp(\"^\\\\d{4}$\");\n    var keys = Object.keys(doc);\n    var ys = keys.filter(function(k){return year_regex.test(k)});\n    ys.forEach(function(y){\n      var wim_dir = doc._id.split('.').slice(1);\n      if(doc[y].chain_lengths === undefined ){\n        emit(['nochains',y,wim_dir[0],wim_dir[1]], null);\n      }else{\n\t      var long_chains = doc[y].chain_lengths.filter(function(c){ return c == 200; })\n          if(long_chains.length > 2 ){\n              var re2 = new RegExp([y,\"agg.redo\"].join('_'));\n              var akeys = Object.keys(doc._attachments);\n              var ays = akeys.filter(function(k){return re2.test(k)});\n              if(ays.length==0){\n                  emit(['longchains',y,wim_dir[0],wim_dir[1]], null);\n              }else{\n                  //emit(ays,null)\n                  var attlist = ays.map(function(p){return [doc._id,p].join('/'); });\n                  emit(['plottedlongchains',y,wim_dir[0],wim_dir[1]]\n                       ,attlist);\n              }\n          }\n      }\n    })\n  }\n}\n"
       },
       "aggregate_plots": {
           "map": "function(doc) {\n  var re = new RegExp(\"^wim\"); \n  if( re.test(doc._id) ){\n    var re2 = new RegExp(\"agg.redo\");\n    var akeys = Object.keys(doc._attachments);\n    var ays = akeys.filter(function(k){return re2.test(k)});\n   \n    ays.forEach(function(y){\n      var parts=y.split(/\\.|_/)\n      emit([parts[2],parts[0],parts[1]],[doc._id,y].join('/'))\n    })\n  }\n}"
       },
       "no_aggplots": {
           "map": "function(doc) {\n  var re = new RegExp(\"wim\");\n  if( re.test(doc._id) ){\n    var year_regex = new RegExp(\"^\\\\d{4}$\");\n    var keys = Object.keys(doc);\n    var ys = keys.filter(function(k){return year_regex.test(k)});\n    ys.forEach(function(y){\n      var wim_dir = doc._id.split('.').slice(1);\n      var re2 = new RegExp([y,\"agg.redo\"].join('_'));\n      var akeys = Object.keys(doc._attachments);\n      var ays = akeys.filter(function(k){return re2.test(k)});\n      if(ays.length==0){\n         emit(['no_agg_plots',y,wim_dir[0],wim_dir[1]], null);\n      }\n    })\n  }\n}\n",
           "reduce": "_count"
       },
       "pair_check_2": {
           "map": "function(doc) {\n  var re = new RegExp(\"wim\"); \n  if( re.test(doc._id) ){\n    var year_regex = new RegExp(\"^\\\\d{4}$\");\n    var keys = Object.keys(doc);\n    var ys = keys.filter(function(k){return year_regex.test(k)});\n    \n    ys.forEach(function(y){\n      var wim_dir = doc._id.split('.').slice(1);\n      if(wim_dir[1]===undefined) return null;\n      if(doc[y].merged === undefined || doc[y].merged == 'todo'){\n        emit([wim_dir[0],wim_dir[1],y,'todo'], null);\n      }else if( doc[y].merged == 'nopair' ){\n       emit([wim_dir[0],wim_dir[1],y,'nopair'], null);\n      }\n    })\n  }\n}",
           "reduce": "_count"
       },
       "imputed_status": {
           "map": "function(doc) {\n  var re = new RegExp(\"wim\");\n  if( re.test(doc._id) ){\n    var year_regex = new RegExp(\"^\\\\d{4}$\");\n    var keys = Object.keys(doc);\n    var ys = keys.filter(function(k){return year_regex.test(k)});\n    wim_dir = doc._id.split('.').slice(1);\n    wim_dir[0]=+wim_dir[0]\n    //if(wim_dir.length==1){\n    // docs like wim.120 without a direction typically just say \"no data\"\n    //    return null\n    //}\n    ys.forEach(function(y){\n      if(doc[y+''].imputed === undefined){\n         emit([+y,'unprocessed'].concat(wim_dir), null)\n         return null\n      }\n      emit([+y,doc[y+''].imputed].concat(wim_dir), null)\n      return null\n    })\n  }\n}\n",
           "reduce": "_count"
       },
       "plot_status": {
           "map": "function(doc) {\n  var re = new RegExp(\"wim\");\n  if( re.test(doc._id) ){\n    var years=[2007,2008,2009,2010,2011,2012,2013,2014]\n    var year_regex = new RegExp(\"^\\\\d{4}$\");\n    var keys = Object.keys(doc);\n    var ys = keys.filter(function(k){return year_regex.test(k)});\n    var wim_dir = doc._id.split('.').slice(1);\n    if(wim_dir.length==1){\n      return null\n    }\n    // check either _attachments or detached\n    var plotlist = doc._attachments === undefined ? doc.detached : doc._attachments\n    if(plotlist === undefined){\n      return null\n    }\n    var plots = Object.keys(plotlist)\n    // sift though attached plots for each year\n    years.forEach(function(y){\n      if(ys.indexOf(y+'') === -1){\n         emit([y,'nothing',wim_dir[0],wim_dir[1]], null)\n         return null\n      }\n      var plot_regex = new RegExp(y+\"_agg\")\n      var year_plots = plots.filter(function(k){return plot_regex.test(k)})\n      if(year_plots === undefined || year_plots.length===0){\n        emit([y,'nothing',wim_dir[0],wim_dir[1]], null)\n      }else{\n        if(year_plots.length<9){\n          emit([y,'8agg',wim_dir[0],wim_dir[1]], null)\n        }else{\n          emit([y,'plots',wim_dir[0],wim_dir[1]], year_plots)\n        }\n      }\n      return null\n    })\n  }\n}\n",
           "reduce": "_count"
       },
       "too_many_agg_plots": {
           "map": "function(doc) {\n  var re = new RegExp(\"wim\");\n  if( re.test(doc._id) ){\n    var years=[2007,2008,2009,2010,2011,2012,2013,2014]\n    var year_regex = new RegExp(\"^\\\\d{4}$\");\n    var keys = Object.keys(doc);\n    var ys = keys.filter(function(k){return year_regex.test(k)});\n    var wim_dir = doc._id.split('.').slice(1);\n    if(wim_dir.length==1){\n      return null\n    }\n    // check either _attachments or detached\n    var plotlist = doc._attachments === undefined ? doc.detached : doc._attachments\n    if(plotlist === undefined){\n      return null\n    }\n    var plots = Object.keys(plotlist)\n    // sift though attached plots for each year\n    years.forEach(function(y){\n      if(ys.indexOf(y+'') === -1){\n         return null\n      }\n      var plot_regex = new RegExp(y+\"_agg\")\n      var year_plots = plots.filter(function(k){return plot_regex.test(k)})\n      if(year_plots === undefined || year_plots.length===0){\n        return null\n      }else{\n        if(year_plots.length>8){\n          emit([y,wim_dir[0],wim_dir[1]], null)\n        }\n      }\n      return null\n    })\n  }\n}\n",
           "reduce": "_count"
       },
       "pair_check_yr": {
           "map": "function(doc) {\n  var re = new RegExp(\"wim\"); \n  if( re.test(doc._id) ){\n    var year_regex = new RegExp(\"^\\\\d{4}$\");\n    var keys = Object.keys(doc);\n    var ys = keys.filter(function(k){return year_regex.test(k)});\n    \n    ys.forEach(function(y){\n      var wim_dir = doc._id.split('.').slice(1);\n      if(wim_dir[1]===undefined) return null;\n      //if(doc[y].paired === \"none\") return null\n      if(doc[y].neighbors !== undefined && doc[y].neighbors === \"none\"){\n        emit([+y,wim_dir[0],wim_dir[1],'no neighbors'], null);\n      }else if(doc[y].merged === undefined || doc[y].merged == 'todo'){\n        emit([+y,wim_dir[0],wim_dir[1],'todo'], null);\n      }else if( doc[y].merged == 'nopair' ){\n       emit([+y,wim_dir[0],wim_dir[1],'nopair'], null);\n      }\n    })\n  }\n}",
           "reduce": "_count"
       },
       "merge_check_yr": {
           "map": "function(doc) {\n  var re = new RegExp(\"wim\"); \n  if( re.test(doc._id) ){\n    var year_regex = new RegExp(\"^\\\\d{4}$\");\n    var keys = Object.keys(doc);\n    var ys = keys.filter(function(k){return year_regex.test(k)});\n    wim_dir = doc._id.split('.').slice(1);\n    if(wim_dir[1]===undefined) return null\n    wim_dir[0]=+wim_dir[0]\n\n    ys.forEach(function(y){\n      if(doc[y].merged === undefined ) return null\n      if(doc[y].merged === 'nopair' ) return null\n      var mgd = doc[y+''].merged\n      if(!Array.isArray(mgd)){\n         mgd = [mgd]\n      }\n      mgd.forEach(function(merg){\n         emit([+y].concat(wim_dir,merg), 1)\n         return null\n      })\n      return null\n    })\n  }\n}",
           "reduce": "_count"
       },
       "pairRData": {
           "map": "function(doc) {\n  var re = new RegExp(\"^wim\"); \n  if( ! re.test(doc._id) ){\n    var re2 = new RegExp(\"^wim.*paired\\.RData$\"); \n    var keys = Object.keys(doc._attachments);\n    var ys = keys.filter(function(k){return re2.test(k)});\n    \n    ys.forEach(function(y){\n      var parts=y.split('.')\n      var doc_year = parts[5]\n      var site_dir = parts[0]+'.'+parts[1]+'.'+parts[2]\n      emit([+doc_year,site_dir,y],null)\n    })\n  }\n}",
           "reduce": "_count"
       },
       "merge_yr_lanes_sorting": {
           "map": "function(doc) {\n  var re = new RegExp(\"wim\"); \n  if( re.test(doc._id) ){\n    wim_dir = doc._id.split('.').slice(1);\n    if(wim_dir[1]===undefined) return null\n    wim_dir[0]=+wim_dir[0]\n\n    var propk = Object.keys(doc.properties).sort()\n    var lanes = doc.properties[propk[0]].lanes\n\n    var year_regex = new RegExp(\"^\\\\d{4}$\");\n    var keys = Object.keys(doc);\n    var ys = keys.filter(function(k){return year_regex.test(k)});\n\n    ys.forEach(function(y){\n      if((doc[y].merged === undefined ) ||\n         (doc[y].merged === 'nopair' ) ){\n         emit([+y].concat(lanes,'nopair'), 1)\n         return null\n      }\n      var mgd = doc[y+''].merged\n      if(!Array.isArray(mgd)){\n         mgd = [mgd]\n      }\n      mgd.forEach(function(merg){\n         emit([+y].concat(lanes,'pair',+merg,wim_dir), 1)\n         return null\n      })\n      return null\n    })\n  }\n}",
           "reduce": "_count"
       }
   }
}
